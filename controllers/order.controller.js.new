// filepath: /workspaces/BarcodeApp-Backend/controllers/order.controller.js
const Order = require('../models/Order.model');
const Table = require('../models/Table.model');
const { calculateOrderTotal, validateTable } = require('../utils/orderUtils');
const response = require('../utils/responseHandler');
const logger = require('../utils/logger');

// Get all orders
exports.getAllOrders = async (req, res) => {
  const { status, table } = req.query;
  const query = {};
  
  if (status) query.status = status;
  if (table) query.table = table;  // Using 'table' instead of 'tableId'
  
  const orders = await Order.find(query)
    .populate('table')
    .populate('items.menuItem')
    .populate('servedBy')
    .sort({ createdAt: -1 });
  
  return response.success(res, orders, 'Orders retrieved successfully');
};

// Get single order by ID
exports.getOrderById = async (req, res) => {
  const order = await Order.findById(req.params.id)
    .populate('table')
    .populate('items.menuItem')
    .populate('servedBy');
  
  if (!order) {
    return response.notFound(res, 'Order not found');
  }
  
  return response.success(res, order, 'Order retrieved successfully');
};

// Create new order
exports.createOrder = async (req, res) => {
  const { tableId, items, customerName, customerEmail, notes } = req.body;
  
  // Validate input
  if (!tableId || !items || !items.length) {
    return response.badRequest(res, 'Table ID and at least one item are required');
  }
  
  // Check if table exists and validate prices
  try {
    const table = await validateTable(Table, tableId);
    const { totalAmount, validatedItems } = await calculateOrderTotal(items, true);
    
    const newOrder = new Order({
      table: tableId,
      customer: {
        name: customerName || 'Guest',
        email: customerEmail
      },
      items: validatedItems,
      totalAmount,
      notes,
      status: 'pending',
      paymentStatus: 'unpaid'
    });
    
    const savedOrder = await newOrder.save();
    logger.info(`New order created: ${savedOrder._id} for table ${tableId}`);
    
    // Populate references for response
    const populatedOrder = await Order.findById(savedOrder._id)
      .populate('table')
      .populate('items.menuItem');
      
    return response.success(res, populatedOrder, 'Order created successfully', 201);
  } catch (error) {
    logger.error(`Error creating order: ${error.message}`);
    
    // More specific error messages based on the error
    if (error.message.includes('Menu item not found')) {
      return response.badRequest(res, 'One or more menu items not found');
    }
    if (error.message === 'Table not found') {
      return response.notFound(res, 'Table not found');
    }
    
    throw error; // Let the global error handler handle unexpected errors
  }
};

// Update order status
exports.updateOrderStatus = async (req, res) => {
  try {
    const { status } = req.body;
    const validStatuses = ['pending', 'preparing', 'served', 'completed', 'cancelled'];
    
    if (!status || !validStatuses.includes(status)) {
      return response.badRequest(res, 'Valid status is required');
    }
    
    const order = await Order.findById(req.params.id);
    
    if (!order) {
      return response.notFound(res, 'Order not found');
    }
    
    // Check if order is locked
    if (order.status === 'completed' && order.paymentStatus === 'paid') {
      const lastUpdateTime = new Date(order.updatedAt);
      const currentTime = new Date();
      const minutesElapsed = (currentTime - lastUpdateTime) / (1000 * 60);
      
      if (minutesElapsed >= 5) {
        return response.forbidden(res, 'Order is locked. No further changes allowed.');
      }
    }
    
    // Update order status
    order.status = status;
    
    // If status is "served" or "completed", assign staff member who served it
    if (['served', 'completed'].includes(status)) {
      order.servedBy = req.user._id;
    }
    
    await order.save();
    logger.info(`Order ${order._id} status updated to ${status}`);
    
    const updatedOrder = await Order.findById(req.params.id)
      .populate('table')
      .populate('items.menuItem')
      .populate('servedBy');
      
    return response.success(res, updatedOrder, 'Order status updated successfully');
  } catch (error) {
    logger.error(`Error updating order status: ${error.message}`);
    throw error; // Let the global error handler handle unexpected errors
  }
};

// Update payment status
exports.updatePaymentStatus = async (req, res) => {
  try {
    const { paymentStatus } = req.body;
    
    if (!paymentStatus || !['unpaid', 'paid'].includes(paymentStatus)) {
      return response.badRequest(res, 'Valid payment status is required');
    }
    
    const order = await Order.findById(req.params.id);
    
    if (!order) {
      return response.notFound(res, 'Order not found');
    }
    
    // Check if order is locked
    if (order.status === 'completed' && order.paymentStatus === 'paid') {
      const lastUpdateTime = new Date(order.updatedAt);
      const currentTime = new Date();
      const minutesElapsed = (currentTime - lastUpdateTime) / (1000 * 60);
      
      if (minutesElapsed >= 5) {
        return response.forbidden(res, 'Order is locked. No further changes allowed.');
      }
    }
    
    order.paymentStatus = paymentStatus;
    await order.save();
    logger.info(`Order ${order._id} payment status updated to ${paymentStatus}`);
    
    return response.success(res, order, 'Payment status updated successfully');
  } catch (error) {
    logger.error(`Error updating payment status: ${error.message}`);
    throw error; // Let the global error handler handle unexpected errors
  }
};
